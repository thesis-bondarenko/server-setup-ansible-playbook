---
- name: Use current port specified in input for SSH connection.
  set_fact:
    ansible_port: "{{ current_ssh_port }}"

- name: Check whether it's possible to SSH into root user.
  delegate_to: localhost  # This task must be executed locally.
  ignore_errors: true  # Ensure non-zero return code is accepted.
  ansible.builtin.command: ssh -q -p {{ current_ssh_port }} root@{{ inventory_hostname }} exit
  register: root_ssh_attempt

- name: Ensure root user is locked and admin user is set up.
  remote_user: root
  when: root_ssh_attempt.rc == 0
  block:
    - name: Ensure password of root user is locked.
      ansible.builtin.user:
        name: root
        password_lock: true
        state: present

    - name: Ensure there is an admin user with a locked password and a SSH key pair.
      ansible.builtin.user:
        name: "{{ admin_username }}"
        shell: /bin/bash
        password_lock: true
        generate_ssh_key: true
        state: present

    - name: Ensure admin user is in sudoers list with all rights without password.
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        regexp: "^{{ admin_username }}\\s"
        line: "{{ admin_username }} ALL=(ALL:ALL) NOPASSWD: ALL"
        validate: visudo -cf %s
        state: present

    - name: Retrieve root authorized keys.
      ansible.builtin.command: cat /root/.ssh/authorized_keys
      register: root_authorized_keys

    - name: Ensure admin user has all the authorized keys of root user.  # This step is only necessary when admin user was just added.
      ansible.posix.authorized_key:
        user: "{{ admin_username }}"
        key: "{{ root_authorized_keys.stdout }}"
        state: present

    - name: Restart SSH
      service:
        name: ssh
        state: restarted


- name: Ensure the host is ready to be further configured for either wordpress or web targets.
  remote_user: "{{ admin_username }}"
  become: true
  block:
    - name: Gather facts about host system.
      ansible.builtin.gather_facts:

    - name: Ensure SSH access to root user is disallowed.
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: ^PermitRootLogin
        line: PermitRootLogin no
        validate: sshd -t -f %s
        state: present

    - name: Ensure password-based SSH access is disallowed.
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: ^PasswordAuthentication
        line: PasswordAuthentication no
        validate: sshd -t -f %s
        state: present

    - name: Ensure challenge-response-based SSH access is disallowed.
      ansible.builtin.lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: ^ChallengeResponseAuthentication
        line: ChallengeResponseAuthentication no
        validate: sshd -t -f %s
        state: present

    - name: Restart SSH
      service:
        name: ssh
        state: restarted

    - name: Update APT package cache.
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: Upgrade APT to the latest packages.
      ansible.builtin.apt:
        upgrade: safe

    - name: Ensure UFW is installed for managing server firewall.
      ansible.builtin.apt:
        name: ufw
        state: present

    - name: Ensure server firewall default is to deny incoming traffix.
      community.general.ufw:
        default: deny
        direction: incoming

    - name: Ensure server firewall default is to allow outgoing traffix.
      community.general.ufw:
        default: allow
        direction: outgoing

    - name: Ensure server firewall allows SSH through current port.
      community.general.ufw:
        rule: allow
        port: "{{ current_ssh_port }}"
        proto: tcp

    - name: Ensure server firewall allows SSH through new port.
      community.general.ufw:
        rule: allow
        port: "{{ new_ssh_port }}"
        proto: tcp

    - name: Ensure server firewall allows HTTP traffic.
      community.general.ufw:
        rule: allow
        port: "80"
        proto: tcp

    - name: Ensure server firewall allows HTTPS traffic.
      community.general.ufw:
        rule: allow
        port: "443"
        proto: tcp

    - name: Enable and start UFW.
      community.general.ufw:
        state: enabled

    - name: Perform SSH port changing procedure if new and old SSH keys dont match.
      when: current_ssh_port != new_ssh_port
      block:
        - name: Set up new SSH port
          ansible.builtin.lineinfile:
            dest: /etc/ssh/sshd_config
            regexp: ^Port
            line: Port {{ new_ssh_port }}
            validate: sshd -t -f %s
            state: present

        - name: Restart SSH
          service:
            name: ssh
            state: restarted

        - name: Use new port specified in input for SSH connections.
          set_fact:
            ansible_port: "{{ new_ssh_port }}"

        - name: Delete any UFW rules that allowed SSH through old port.
          community.general.ufw:
            rule: allow
            port: "{{ current_ssh_port }}"
            proto: tcp
            delete: true

        - name: Ensure any SSH connections on old port are denied.
          community.general.ufw:
            rule: deny
            port: "{{ current_ssh_port }}"
            proto: any

        - name: Reload UFW.
          community.general.ufw:
            state: reloaded

    - name: Ensure UFW service starts on boot.
      ansible.builtin.service:
        name: ufw
        enabled: true

    - name: Ensure build-essential packages are installed.
      ansible.builtin.apt:
        name: build-essential
        state: present

    - name: Ensure git is installed.
      ansible.builtin.apt:
        name: git
        state: present

    - name: Ensure Nginx is installed.
      ansible.builtin.apt:
        name: nginx
        state: present

    - name: Ensure there is a deploy user with a locked password and a SSH key pair.
      ansible.builtin.user:
        name: "{{ deploy_username }}"
        shell: /bin/bash
        password_lock: true
        generate_ssh_key: true
        state: present

    - name: Ensure there is .profile file in deploy user home directory.
      ansible.builtin.file:
        path: /home/{{ deploy_username }}/.profile
        state: file

    - name: Ensure UMASK of deploy user is 007 when using login shell.  # Reduce security concerns by setting permissions for other users to none (o=)
      ansible.builtin.lineinfile:
        dest: /home/{{ deploy_username }}/.profile
        regexp: "^umask"
        line: "umask 007"
        state: present

    - name: Get employee public keys from Singleton repository and local public keys.
      become: false
      delegate_to: localhost
      block:
        - name: Ensure temporary folder used for cloning SSH key repository is empty.
          ansible.builtin.file:
            path: ./temp
            state: absent

        - name: Copy public keys from "sg-public-keys" repository into temporary folder.
          ansible.builtin.git:
            repo: git@bitbucket.org:singleton-group/sg-public-keys.git
            dest: ./temp
            accept_hostkey: true

        - name: Save the contents of the public keys of employees specified for admin in input to an Ansible variable.
          ansible.builtin.shell:
            chdir: temp
            cmd: "cat `ls | grep -w \"{{ authorized_employees_for_admin
            | map('regex_replace', '^(.*)$', '\\1.pub')
            | join('\\|') }}\"`"
          register: matching_public_keys_admin

        - name: Save the contents of the public keys of employees specified for deploy in input to an Ansible variable.
          ansible.builtin.shell:
            chdir: temp
            cmd: "cat `ls | grep -w \"{{ authorized_employees_for_deploy
            | map('regex_replace', '^(.*)$', '\\1.pub')
            | join('\\|') }}\"`"
          register: matching_public_keys_deploy

        - name: Delete temporary folder used for cloning SSH key repository.
          ansible.builtin.file:
            path: temp
            state: absent

        - name: List public key parameters used locally by SSH agent.
          ansible.builtin.command: ssh-add -L
          register: local_public_keys

    - name: Ensure admin user accepts SSH connections ONLY from keys specified in input and current public key.
      ansible.posix.authorized_key:
        user: "{{ admin_username }}"
        exclusive: true
        state: present
        key: "{{ matching_public_keys_admin.stdout + '\n' + local_public_keys.stdout  }}"

    - name: Ensure deploy user accepts SSH connections ONLY from keys specified in input.
      ansible.posix.authorized_key:
        user: "{{ deploy_username }}"
        exclusive: true
        state: present
        key: "{{ matching_public_keys_deploy.stdout }}"

    - name: Restart SSH
      service:
        name: ssh
        state: restarted

    - name: Ensure deploy user is only allowed to sudo the commands specified in input.
      when: commands_allowed_for_deploy is sequence and (commands_allowed_for_deploy | length > 0)
      ansible.builtin.lineinfile:
        dest: /etc/sudoers
        regexp: "^{{ deploy_username }} "
        line: "{{ deploy_username }} ALL=NOPASSWD: {{ commands_allowed_for_deploy | join(', ') }}"
        validate: visudo -cf %s
        state: present

    - name: Install and enable fail2ban.
      include_role:
        name: robertdebock.fail2ban
      vars:
        fail2ban_destemail: "{{ fail2ban_notifications_email }}"
        fail2ban_sender: fail2ban@{{ domain_name }}
        fail2ban_ignoreips: "127.0.0.1/8 ::1 {{ fail2ban_whitelisted_ips | join(' ') }}"
...
